var searchIndex = JSON.parse('{\
"tic_tac_toe":{"doc":"","t":[12,3,11,11,11,11,11,11,0,11,5,5,5,5,5,11,11,11,11,17,3,13,13,4,13,13,4,13,6,13,6,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["0","InvalidMove","borrow","borrow_mut","clone","clone_into","fmt","from","game","into","main","parse_move","print_tiles","prompt_move","read_line","to_owned","try_from","try_into","type_id","BOARD_SIZE","Game","GameAlreadyOver","InvalidPosition","MoveError","O","O","Piece","Tie","Tile","TileNotEmpty","Tiles","Winner","X","X","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","current_piece","current_piece","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","into","into","into","into","is_finished","make_move","new","other","tiles","tiles","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_winner","winner","winner","col","col","other_piece","row","row"],"q":["tic_tac_toe","","","","","","","","","","","","","","","","","","","tic_tac_toe::game","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tic_tac_toe::game::MoveError","","","",""],"d":["","This struct is used to represent an error when an invalid …","","","","","","Returns the argument unchanged.","This module contains the <code>Game</code> struct and associated types …","Calls <code>U::from(self)</code>.","The main entry point for the program.","Function to get the move from user (row and column) If not …","Function used to print the board for the user","Function returns the row and column of selected move","This function makes reading a line of input easier","","","","","Creates a constant board size of 3","","The game was already over when a move was attempted","The position provided was invalid","Represents erros when making a move","","","Creates an enum for your piece that you input","","","The tile already contained another piece","Creates a 2D array for the titles of the board","Represent the 3 outcomes of the game as an enum: Either X …","","","","","","","","","","","","","","","","","","","Function that returns a copy of current piece","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Function that checks if the game is finished","This is the function created in order to make a move","","","","","","","","","","","","","","","","","","","","","Creates a function that checks the last move and see if …","Function that returns the winner of the game if there is …","","","","","",""],"i":[1,0,1,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,0,0,10,10,0,8,9,0,9,0,10,0,0,8,9,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,11,11,8,9,8,9,10,11,8,9,10,11,8,9,8,9,10,11,11,11,11,8,11,11,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,11,11,11,15,16,16,15,16],"f":[0,0,[[]],[[]],[1,1],[[]],[[1,2],3],[[]],0,[[]],[[]],[4,[[5,[1]]]],[[]],[[]],[[],6],[[]],[[],5],[[],5],[[],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,8],[9,9],[10,10],[11,11],[[]],[[]],[[]],[[]],[11,8],0,[[8,8],12],[[9,9],12],[[8,2],3],[[9,2],3],[[10,2],3],[[11,2],3],[[]],[[]],[[]],[[]],[8],[9],[[]],[[]],[[]],[[]],[11,12],[[11,13,13],[[5,[10]]]],[[],11],[8,8],[11],0,[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],7],[[],7],[[],7],[[],7],[[11,13,13]],[11,[[14,[9]]]],0,0,0,0,0,0],"p":[[3,"InvalidMove"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Result"],[3,"String"],[3,"TypeId"],[4,"Piece"],[4,"Winner"],[4,"MoveError"],[3,"Game"],[15,"bool"],[15,"usize"],[4,"Option"],[13,"InvalidPosition"],[13,"TileNotEmpty"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
